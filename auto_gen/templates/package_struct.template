/*
本文件自动生成，请勿手工修改
*/

#ifndef {version}_{package_name_upper}_H
#define {version}_{package_name_upper}_H

#include "Fields.h"
#include <vector>
#include "../ftd.h"
#include "../FTDPackage.h"
#include "../FtdIO.h"
#include "../FTDID.h"

using namespace FTD;

namespace {version} 
{{

struct {package_name} : public Package
{{

{member_def_lines}

	{package_name}() : Package({version_number}, TID_{package_name})
	{{
		header.version = {version_number};
		header.transactionId = TID_{package_name};
	}}

	void clear()
	{{
{member_clear_lines}			
	}}

	bool mergeField(const Field& field, int fid)
	{{
{member_merge_lines}
		return false;
	}}
	
	virtual bool mergeFieldMessage(const FTDCFieldHeader& header, const char* msg)
	{{
		Field field = {{ 0 }};
		int readLen = 0;
		bool readFieldSucc = readField(msg, header.fid, field, readLen);
		if (readFieldSucc)
		{{
			if (readLen != header.fidLength)
			{{
				//Read Field's return length != fieldHeader.length Exception
				return false;
			}}
			return mergeField(field, header.fid);
		}}
		return false;
	}}

	
		
		
	void toMessages(std::vector<std::string>& ftdcMsgs)
	{{
		ftdcMsgs.clear();
		std::vector<std::string> ftdcContents;
		std::vector<FTDCHeader> headers;
			
		char* ftdcBuffer = new char[MAX_FTDC_LENGTH + 1];
		char* fieldBuffer = new char[MAX_FTDC_LENGTH + 1];
		char* ftdcHeaderBuffer = new char[FTDC_HEADER_LENGTH + 1];
		FTDCHeader ftdcHeader = {{ 0 }};
		memcpy(&ftdcHeader, &header, sizeof(FTDCHeader));
		int writeFieldCount = 0;
		char* nextWrite = ftdcBuffer;
		int vecSize = 0;
		int fieldLen = 0;
{member_write_sections}

		if (nextWrite != ftdcBuffer)
		{{
			ftdcHeader.contentLength = nextWrite - ftdcBuffer;
			ftdcHeader.fieldCount = writeFieldCount;
			headers.push_back(ftdcHeader);
			ftdcContents.push_back(std::string(ftdcBuffer, nextWrite - ftdcBuffer));
		}}
		int contentLength = ftdcContents.size();
		if (contentLength == 1)
		{{
			headers[0].chain = FTDCChainSingle;
		}}
		if (contentLength > 1)
		{{
			headers[0].chain = FTDCChainFirst;
			headers[contentLength - 1].chain = FTDCChainLast;
			for (int i = 1; i < contentLength - 1; i++)
			{{
				headers[i].chain = FTDCChainMiddle;
			}}
		}}
		for (int i = 0; i < contentLength; i++)
		{{
			writeFTDCHeader(headers[i], ftdcHeaderBuffer);
			std::string ftdcMsg;
			ftdcMsg.append(ftdcHeaderBuffer, FTDC_HEADER_LENGTH);
			ftdcMsg.append(ftdcContents[i]);
			ftdcMsgs.push_back(ftdcMsg);
		}}

		delete[] ftdcHeaderBuffer;
		delete[] ftdcBuffer;
		delete[] fieldBuffer;
	}}
}};

}}

#endif
